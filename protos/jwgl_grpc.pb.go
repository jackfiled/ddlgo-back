// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/jwgl.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JwglerClient is the client API for Jwgler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JwglerClient interface {
	GetSemester(ctx context.Context, in *GetSemesterRequest, opts ...grpc.CallOption) (*GetSemesterResponse, error)
}

type jwglerClient struct {
	cc grpc.ClientConnInterface
}

func NewJwglerClient(cc grpc.ClientConnInterface) JwglerClient {
	return &jwglerClient{cc}
}

func (c *jwglerClient) GetSemester(ctx context.Context, in *GetSemesterRequest, opts ...grpc.CallOption) (*GetSemesterResponse, error) {
	out := new(GetSemesterResponse)
	err := c.cc.Invoke(ctx, "/jwgl.Jwgler/GetSemester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JwglerServer is the server API for Jwgler service.
// All implementations must embed UnimplementedJwglerServer
// for forward compatibility
type JwglerServer interface {
	GetSemester(context.Context, *GetSemesterRequest) (*GetSemesterResponse, error)
	mustEmbedUnimplementedJwglerServer()
}

// UnimplementedJwglerServer must be embedded to have forward compatible implementations.
type UnimplementedJwglerServer struct {
}

func (UnimplementedJwglerServer) GetSemester(context.Context, *GetSemesterRequest) (*GetSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSemester not implemented")
}
func (UnimplementedJwglerServer) mustEmbedUnimplementedJwglerServer() {}

// UnsafeJwglerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JwglerServer will
// result in compilation errors.
type UnsafeJwglerServer interface {
	mustEmbedUnimplementedJwglerServer()
}

func RegisterJwglerServer(s grpc.ServiceRegistrar, srv JwglerServer) {
	s.RegisterService(&Jwgler_ServiceDesc, srv)
}

func _Jwgler_GetSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwglerServer).GetSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwgl.Jwgler/GetSemester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwglerServer).GetSemester(ctx, req.(*GetSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jwgler_ServiceDesc is the grpc.ServiceDesc for Jwgler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jwgler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jwgl.Jwgler",
	HandlerType: (*JwglerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSemester",
			Handler:    _Jwgler_GetSemester_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/jwgl.proto",
}
